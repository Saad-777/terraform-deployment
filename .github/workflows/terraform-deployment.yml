name: Deploy Terraform

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      db_password:
        description: 'Database password for RDS'
        required: true
        type: string
      terraform-action:
        description: 'Terraform Action to do'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy


jobs:
  setup-runner:
    uses: ./.github/workflows/ec2-runner.yml
    with: {}
    secrets: inherit

  terraform:
    needs: setup-runner
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials (with session token)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event.inputs.terraform-action == 'plan'
        run: terraform plan -var-file="config/terraform.tfvars" -var "db_password=${{ github.event.inputs.db_password }}"

      - name: Terraform Apply
        if: github.event.inputs.terraform-action == 'apply'
        run: terraform apply -auto-approve -var-file="config/terraform.tfvars" -var "db_password=${{ github.event.inputs.db_password }}"

      - name: Terraform Destroy
        if: github.event.inputs.terraform-action == 'destroy'
        run: terraform destroy -auto-approve


  cleanup-runner:
    name: Terminate EC2 Runner
    needs: [terraform, setup-runner]
    runs-on: ubuntu-latest
    if: always() # Ensures cleanup runs even if previous jobs fail

    steps:
      - name: Terminate EC2 Instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1
          INSTANCE_ID: ${{ needs.setup-runner.outputs.instance_id}}
        run: |
          if [ -n "$INSTANCE_ID" ]; then
            echo "Terminating EC2 instance $INSTANCE_ID"
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set default.region $AWS_REGION
            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          else
            echo "No instance ID found, skipping termination."
          fi
