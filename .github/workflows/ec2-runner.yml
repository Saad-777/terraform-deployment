name: AWS EC2 Self-Hosted Runner

on:
  workflow_dispatch:  # Trigger manually

env:
  AWS_REGION: us-east-1
  INSTANCE_TYPE: t3.micro
  AMI_ID: ami-0c55b159cbfafe1f0 # Amazon Linux 2 AMI example
  RUNNER_LABEL: ephemeral-runner
  RUNNER_NAME: aws-runner

jobs:
  launch-runner:
    name: Launch EC2 and Configure Runner
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.launch-ec2.outputs.instance_id }}
      public_ip: ${{ steps.launch-ec2.outputs.public_ip }}
      runner_token: ${{ steps.get-token.outputs.runner_token }}
    steps:
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
          aws configure set default.region $AWS_REGION

      - name: Get GitHub Runner Registration Token
        id: get-token
        run: |
          token=$(curl -sX POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token \
            | jq -r .token)
          echo "runner_token=$token" >> $GITHUB_OUTPUT


      - name: Get Default Security Group
        id: get-sg
        run: |
          default_sg=$(aws ec2 describe-security-groups \
            --filters Name=vpc-id,Values=$(aws ec2 describe-vpcs \
              --filters Name=isDefault,Values=true \
              --query 'Vpcs[0].VpcId' --output text) \
            --query 'SecurityGroups[?GroupName==`default`].GroupId' --output text)

          echo "default_sg=$default_sg" >> $GITHUB_OUTPUT
          echo "Default security group: $default_sg"

          # Ensure SSH is allowed from anywhere (port 22)
          aws ec2 authorize-security-group-ingress \
            --group-id $default_sg \
            --protocol tcp --port 22 --cidr 0.0.0.0/0 || true

      # Launch EC2 instance in default VPC
      - name: Launch EC2 Instance
        id: launch-ec2
        run: |
          echo "Launching EC2 instance..."

          instance_id=$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --instance-type $INSTANCE_TYPE \
            --iam-instance-profile Name=EC2RunnerRole \
            --security-group-ids ${{ steps.get-sg.outputs.default_sg }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=GH-Runner}]' \
            --query 'Instances[0].InstanceId' --output text)
          
          echo "Waiting for instance to be running..."
          aws ec2 wait instance-running --instance-ids $instance_id

          public_ip=$(aws ec2 describe-instances \
            --instance-ids $instance_id \
            --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)

          echo "instance_id=$instance_id" >> $GITHUB_OUTPUT
          echo "public_ip=$public_ip" >> $GITHUB_OUTPUT

          echo "Launched instance $instance_id with public IP $public_ip"

      # SSH into the instance and install GitHub runner
      - name: Install Runner on EC2
        run: |
          echo "Installing GitHub runner on EC2..."
          ssh -o StrictHostKeyChecking=no ec2-user@${{ steps.launch-ec2.outputs.public_ip }} << 'EOF'
            sudo yum update -y
            sudo yum install -y curl tar
            mkdir actions-runner && cd actions-runner
            curl -o actions-runner.tar.gz -L https://github.com/actions/runner/releases/download/v2.317.0/actions-runner-linux-x64-2.317.0.tar.gz
            tar xzf actions-runner.tar.gz
            ./config.sh --url https://github.com/${{ github.repository }} --token ${{ steps.get-token.outputs.runner_token }} --name $RUNNER_NAME --labels $RUNNER_LABEL --unattended
            nohup ./run.sh &
          EOF


          
